/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2020-08-10 14:09:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import Quiz.*;
import UserPackage.*;
import HistoryPackage.History;
import java.text.SimpleDateFormat;

public final class quizResults_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Your Results</title>\r\n");
      out.write("\r\n");
      out.write("    <!-- Styles -->\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/quizResults_style1.css\">\r\n");
      out.write("    <!-- Google Fonts -->\r\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"content\">\r\n");
      out.write("    ");

        final String ATTR = "RESULTS";
        final String ATTR2 = "HISTORY";
        Map<Integer, QuestionPassResult> questionResults = (Map<Integer, QuestionPassResult>) request.getAttribute(ATTR);
        List<History> histories = (List<History>) request.getAttribute(ATTR2);
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <p class=\"headerNameP\">Your Quiz Results</p>\r\n");
      out.write("\r\n");
      out.write("    <a href=\"UserServlet\">My Page</a>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"currentResult\">\r\n");
      out.write("        <table>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th colspan=\"6\" width=\"1200\">Current Results</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th>Question â„–</th>\r\n");
      out.write("                <th>Question</th>\r\n");
      out.write("                <th>Question Type</th>\r\n");
      out.write("                <th>Score</th>\r\n");
      out.write("                <th>Your Answer(s)</th>\r\n");
      out.write("                <th>Valid Answer(s)</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");

                for(Integer q : questionResults.keySet()) {
                    QuestionPassResult questionPass = questionResults.get(q);
                    Question question = questionPass.question;
                    out.println("<tr>");
                    out.print("<td style=\"text-align: center;\">");
                    out.print(q);
                    out.println("</td>");
                    out.print("<td>");
                    out.print(question.getQuestion());
                    out.println("</td>");

                    int type = question.getType();
                    out.print("<td>");
                    out.print(QuestionType.getTypeName(type));
                    out.println("</td>");

                    String stl = "color: green;";
                    if(questionPass.passType == QuestionPassResult.NOT_QUESTION_PASS) {
                        stl = "color: red;";
                    } else if(questionPass.passType == QuestionPassResult.PARTIAL_QUESTION_PASS) {
                        stl = "color: yellow;";
                    }
                    stl += "font-weight: bold; font-size: 18px; text-align: center;";
                    out.print("<td style=\"" + stl + "\">");
                    out.print(questionPass.userScore);
                    out.print("/");
                    out.print(question.getScore());
                    out.println("</td>");
                    List<String> list = questionPass.userAnswers;
                    out.print("<td>");
                    for(int i = 0; i<list.size(); i++) {
                        if(i != 0) {
                            out.print(", ");
                        }
                        out.print(list.get(i));
                    }
                    out.println("</td>");
                    out.print("<td>");
                    if(type == QuestionType.MULTI_ANSWER_QUESTION) {
                        MultipleAnswerQuestion multipleAnswer = (MultipleAnswerQuestion) question;

                        if(multipleAnswer.isOrdered()) {
                            List<String> orderAnswers = multipleAnswer.getOrderedAnswers();
                            for(int i = 0; i<orderAnswers.size(); i++) {
                                if(i != 0) {
                                    out.print(", ");
                                }
                                out.print("[");
                                out.print(orderAnswers.get(i));
                                out.print("]");
                            }
                        } else {
                            Set<String> set = multipleAnswer.getAnswerSet();
                            boolean bool = false;
                            for(String str : set) {
                                if(bool) {
                                    out.print(", ");
                                }
                                out.print("[");
                                out.print(str);
                                out.print("]");
                                bool = true;
                            }
                        }
                    } else {
                        Set<String> set = question.getAnswerSet();
                        boolean bool = false;
                        for(String str : set) {
                            if(bool) {
                                out.print(", ");
                            }
                            out.print("[");
                            out.print(str);
                            out.print("]");
                            bool = true;
                        }
                    }
                    out.println("</td>");
                    out.println("</tr>");
                }
      out.write("\r\n");
      out.write("        </table>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <table class=\"otherHistories\">\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th colspan=\"3\">All Your Activity</th>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>Score</th>\r\n");
      out.write("            <th>Start Time</th>\r\n");
      out.write("            <th>End Time</th>\r\n");
      out.write("        </tr>\r\n");
      out.write("        ");

            int fullScore = 0;
            for(QuestionPassResult questionPass : questionResults.values()) {
                fullScore += questionPass.question.getScore();
            }
            SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss dd MMM yyyy");
            for(History history : histories) { 
      out.write("\r\n");
      out.write("        <tr>\r\n");
      out.write("            ");
String stl = "color: green;";
                if(history.getScore() == 0) {
                    stl = "color: red;";
                } else if(history.getScore() < fullScore) {
                    stl = "color: yellow;";
                }
                stl += "font-weight: bold;";
      out.write("\r\n");
      out.write("            <td width=\"100\\\" style=\"");
      out.print( stl );
      out.write("\">\r\n");
      out.write("                ");
      out.print(history.getScore());
      out.write('/');
      out.print(fullScore);
      out.write("\r\n");
      out.write("            </td>\r\n");
      out.write("            <td width=\"340\">\r\n");
      out.write("                ");
      out.print(format.format(history.getStartDate()));
      out.write("\r\n");
      out.write("            </td>\r\n");
      out.write("            <td width=\"340\">\r\n");
      out.write("                ");
      out.print(format.format(history.getEndDate()));
      out.write("\r\n");
      out.write("            </td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        ");
}
      out.write("\r\n");
      out.write("    </table>\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
